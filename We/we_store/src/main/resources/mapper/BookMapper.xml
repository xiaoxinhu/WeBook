<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.BookMapper">

    <!--这些是对book表的查询-->
    <select id="getBookId" resultType="int">
        select id from book where isbn=#{isbn};
    </select>

    <insert id="addBook" parameterType="com.example.demo.model.book.Book">
      insert into book(author,bookName,isbn,publish,birthday,marketPrice,price,stock,description,put,newProduct,recommend)
        values (#{author},#{bookName},#{isbn},#{publish},#{birthday},#{marketPrice},#{price},#{stock},#{description},#{put},#{newProduct},#{recommend})
    </insert>

    <!-- 得到出版社对应的图书数量 -->
    <select id="getPublishBookNum" resultType="int">
        select count(*) from book where publish=#{publishName}
    </select>

    <!-- 分页得到图书列表 -->
    <select id="getBooksByPage" resultType="com.example.demo.model.book.Book">
        select * from book limit #{page},#{pageSize}
    </select>
    <!-- 得到图书封面地址 -->
    <select id="getBookCover" resultType="String">
        select imgSrc from bookimg where isbn=#{isbn} limit 1
    </select>
    <!-- 统计总共图书数量 -->
    <select id="getBookCount" resultType="int">
        select count(*) from book
    </select>
    <!-- 添加图书图片地址 -->
    <insert id="addBookImg" parameterType="com.example.demo.model.book.BookImg">
        insert into bookimg (isbn,imgSrc,cover) values (#{isbn},#{imgSrc},#{cover})
    </insert>
    <!-- 得到对应isbn图书的图片地址 -->
    <select id="getBookImgSrcList" resultType="String">
        select imgSrc from bookimg where isbn=#{isbn}
    </select>
    <!-- 修改图书是否上架 -->
    <update id="modifyBookPut">
        update book
            set put=#{put}
                where id=#{id}
    </update>

    <!--这些是对推荐图书表的操作(recommend)-->
    <insert id="addToRecommend" parameterType="com.example.demo.model.book.Recommend">
        insert into recommend (bookId,grade,addTime) values (#{bookId},#{grade},#{addTime})
    </insert>


    <delete id="deleteFromRecommend">
        delete from recommend where bookId=#{bookId}
    </delete>

    <update id="modifyBookRec">
        update book
            set recommend=#{recommend}
                where id=#{bookId}
    </update>

    <select id="hasExistInRec" resultType="int">
        select count(*) from recommend where bookId=#{bookId}
    </select>



    <!-- 对新品表的SQL操作-->
    <insert id="addToNewProduct" parameterType="com.example.demo.model.book.Recommend">
        insert into newproduct (bookId,rank,addTime) values (#{bookId},#{rank},#{addTime})
    </insert>

    <delete id="deleteFromNewProduct">
        delete from newproduct where bookId=#{bookId}
    </delete>

    <update id="modifyBookNewPro">
        update book
            set newProduct=#{newProduct}
            where id=#{bookId}
    </update>

    <select id="hasExistInNew" resultType="int">
        select count(*) from newproduct where bookId=#{bookId}
    </select>

    <!-- 删除图书 -->
    <delete id="deleteBookImgOfOne">
        delete from bookimg where isbn=#{isbn}
    </delete>


    <select id="getBook" resultType="com.example.demo.model.book.Book">
        select * from book where id = #{id}
    </select>


    <delete id="deleteBook">
        delete book,newproduct,recommend,booksortlist from book
            left join newproduct on book.id=newproduct.bookId
            left join recommend on book.id=recommend.bookId
            left join booksortlist on book.id=booksortlist.bookId
            where book.id=#{id}
    </delete>

    <!-- 分页查询推荐、新上架书单 -->
    <select id="getNewPutBookList" resultType="com.example.demo.model.book.Book">
       select * from book order by birthday desc limit #{page},#{pageSize}
    </select>

    <select id="getRecommendsByPage" resultType="com.example.demo.model.book.Book">
        select * from book where id in
         (select t.bookId from (select * from recommend limit #{page},#{pageSize})as t )
    </select>

    <select id="getNewProductsByPage" resultType="com.example.demo.model.book.Book">
         select * from book where id in
         (select t.bookId from (select * from newproduct limit #{page},#{pageSize})as t )
    </select>

    <select id="getBookBySecond" resultType="com.example.demo.model.book.Book">
        select * from book
            where id in (select t.bookId from (select * from booksortlist where bookSortId=#{bookSortId})as t )limit #{page},#{pageSize}
    </select>

    <select id="getFirstBookCount" parameterType="list" resultType="int">
        select count(*) from book
        where id in (select bookId from booksortlist
        <where>
            bookSortId in
            <foreach collection="list" item="item" separator="," open="(" close=")" index="">
                #{item}
            </foreach>
        </where>
        )
    </select>

    <select id="getSecondBookCount" resultType="int">
         select count(*) from book
     where id in (select bookId from booksortlist where bookSortId=#{bookSortId})
    </select>

    <!--这是对书d的分类表的操作，将书和分类关联起来-->
    <insert id="addBookToSort">
        insert into booksortlist(bookSortId,bookId) value (#{bookSortId},#{bookId})
    </insert>

    <select id="getBooksByFirst" parameterType="list" resultType="com.example.demo.model.book.Book">
        select * from book
        where id in (select t.bookId from
        (select * from booksortlist
        <where>
            bookSortId in
            <foreach collection="list" item="item" separator="," open="(" close=")" index="">
                #{item}
            </foreach>
        </where>
        )
        as t ) limit #{page},#{pageSize}
    </select>

    <select id="getBookSort" resultType="com.example.demo.model.book.BookSort">
        select * from booksort where id in (select bookSortId from booksortlist where bookId=#{bookId})
    </select>

    <!--    根据id集合查询需要购买的图书的信息-->
    <select id="getBatchBookList" resultType="com.example.demo.model.dto.OrderBookDto">
        select book.id,author,bookName,isbn,publish,
        birthday,marketPrice,price,stock,description,IFNULL(num,1)
        from book left join cart on book.id = cart.id
        where book.id in
        <foreach collection="array" index="index" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </select>

    <select id="getOneBookList" resultType="com.example.demo.model.dto.OrderBookDto">
        select book.id,author,bookName,isbn,publish,
        birthday,marketPrice,price,stock,description
        from book
        where book.id in
        <foreach collection="array" index="index" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </select>
    <select id="getBookByName" resultType="com.example.demo.model.book.Book">
        select * from book where bookName like concat('%',#{name},'%') limit #{page},#{pageSize}
    </select>

    <!--    modifyBookStock-->
    <update id="modifyBookStock">
        update book
            set stock=#{stockNum}
                where id=#{id}
    </update>


</mapper>